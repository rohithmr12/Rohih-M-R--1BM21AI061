#include <iostream>
#include <vector>
using namespace std;

class TopologicalSort {
private:
    int n;
    vector<vector<int>> adjacencyMatrix;
    vector<int> indeg;

public:
    TopologicalSort(int nodes) : n(nodes), adjacencyMatrix(nodes, vector<int>(nodes, 0)), indeg(nodes, 0) {}

    void addEdge(int from, int to) {
        adjacencyMatrix[from][to] = 1;
        indeg[to]++;
    }

    void sourceRemoval() {
        vector<int> t, s;

        for (int i = 0; i < n; i++) {
            if (indeg[i] == 0) {
                s.push_back(i);
            }
        }

        while (!s.empty()) {
            int u = s.back();
            s.pop_back();
            t.push_back(u);

            for (int v = 0; v < n; v++) {
                if (adjacencyMatrix[u][v] == 1) {
                    indeg[v]--;
                    if (indeg[v] == 0) {
                        s.push_back(v);
                    }
                }
            }
        }

        for (int i = 0; i < n; i++) {
            cout << t[i] << endl;
        }
    }
};

int main() {
    int n, e;
    cout << "Enter number of nodes: ";
    cin >> n;
    TopologicalSort graph(n);

    cout << "Enter number of edges: ";
    cin >> e;

    cout << "Enter the edges (from to):\n";
    for (int i = 0; i < e; i++) {
        int from, to;
        cin >> from >> to;
        graph.addEdge(from, to);
    }

    cout << "Topological order:\n";
    graph.sourceRemoval();

    return 0;
}

