#include <iostream>
#include <climits>

#define MAX_VERTICES 100

class Graph {
private:
    int V;
    int graph[MAX_VERTICES][MAX_VERTICES];

    int minKey(int key[], bool mstSet[]) {
        int min = INT_MAX, min_index;

        for (int v = 0; v < V; v++) {
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                min_index = v;
            }
        }

        return min_index;
    }

public:
    Graph(int v) : V(v) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                graph[i][j] = 0;
            }
        }
    }

    void addEdge(int source, int destination, int weight) {
        graph[source][destination] = weight;
        graph[destination][source] = weight;
    }

    void primMST() {
        int parent[MAX_VERTICES];
        int key[MAX_VERTICES];
        bool mstSet[MAX_VERTICES] = { false };

        for (int i = 0; i < V; i++) {
            key[i] = INT_MAX;
        }

        key[0] = 0;
        parent[0] = -1;

        for (int count = 0; count < V - 1; count++) {
            int u = minKey(key, mstSet);
            mstSet[u] = true;

            for (int v = 0; v < V; v++) {
                if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
            }
        }

        std::cout << "Minimum Spanning Tree:" << std::endl;
        for (int i = 1; i < V; i++) {
            std::cout << parent[i] << " -- " << i << " (weight: " << graph[i][parent[i]] << ")" << std::endl;
        }
    }
};

int main() {
    int V = 5;
    Graph g(V);

    g.addEdge(0, 1, 2);
    g.addEdge(0, 3, 6);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 8);
    g.addEdge(1, 4, 5);
    g.addEdge(2, 4, 7);

    g.primMST();

    return 0;
}