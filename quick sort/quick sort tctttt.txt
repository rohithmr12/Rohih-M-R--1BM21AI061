#include <iostream>

class QuickSort {
private:
    int* arr;
    int size;

public:
    QuickSort(int* array, int length) : arr(array), size(length) {}

    int partition(int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i++;
                std::swap(arr[i], arr[j]);
            }
        }

        std::swap(arr[i + 1], arr[high]);
        return i + 1;
    }

    void quicksort(int low, int high) {
        if (low < high) {
            int pivot = partition(low, high);
            quicksort(low, pivot - 1);
            quicksort(pivot + 1, high);
        }
    }

    void sort() {
        quicksort(0, size - 1);
    }

    void display() {
        for (int i = 0; i < size; i++) {
            std::cout << arr[i] << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    int arr[] = { 7, 2, 1, 6, 8, 5, 3, 4 };
    int size = sizeof(arr) / sizeof(arr[0]);

    QuickSort qs(arr, size);
    qs.sort();

    std::cout << "Sorted array: ";
    qs.display();

    return 0;
}
