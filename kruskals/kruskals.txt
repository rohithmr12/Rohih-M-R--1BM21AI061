#include <iostream>

#define MAX_VERTICES 100
#define MAX_EDGES 100

class Edge {
public:
    int source, destination, weight;

    Edge() {}
};

class Graph {
private:
    int V;
    Edge edges[MAX_EDGES];
    int edgeCount;

    int find(int parent[], int i) {
        while (parent[i] != i)
            i = parent[i];
        return i;
    }

    void unionSet(int parent[], int rank[], int x, int y) {
        int xRoot = find(parent, x);
        int yRoot = find(parent, y);

        if (rank[xRoot] < rank[yRoot])
            parent[xRoot] = yRoot;
        else if (rank[xRoot] > rank[yRoot])
            parent[yRoot] = xRoot;
        else {
            parent[yRoot] = xRoot;
            rank[xRoot]++;
        }
    }

public:
    Graph(int v) : V(v), edgeCount(0) {}

    void addEdge(int source, int destination, int weight) {
        edges[edgeCount].source = source;
        edges[edgeCount].destination = destination;
        edges[edgeCount].weight = weight;
        edgeCount++;
    }

    void kruskalMST() {
        for (int i = 0; i < edgeCount - 1; i++) {
            for (int j = 0; j < edgeCount - i - 1; j++) {
                if (edges[j].weight > edges[j + 1].weight) {
                    Edge temp = edges[j];
                    edges[j] = edges[j + 1];
                    edges[j + 1] = temp;
                }
            }
        }

        int parent[MAX_VERTICES];
        int rank[MAX_VERTICES] = {0};

        for (int i = 0; i < V; i++) {
            parent[i] = i;
        }

        Edge mst[MAX_EDGES];
        int mstCount = 0;
        int mstWeight = 0;

        for (int i = 0; i < edgeCount; i++) {
            int sourceRoot = find(parent, edges[i].source);
            int destinationRoot = find(parent, edges[i].destination);

            if (sourceRoot != destinationRoot) {
                mst[mstCount] = edges[i];
                mstCount++;
                mstWeight += edges[i].weight;

                unionSet(parent, rank, sourceRoot, destinationRoot);
            }
        }

        std::cout << "Minimum Spanning Tree:" << std::endl;
        for (int i = 0; i < mstCount; i++) {
            std::cout << mst[i].source << " -- " << mst[i].destination << " (weight: " << mst[i].weight << ")" << std::endl;
        }

        std::cout << "Total Weight: " << mstWeight << std::endl;
    }
};

int main() {
    int V = 5;
    Graph g(V);

    g.addEdge(0, 1, 2);
    g.addEdge(0, 3, 6);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 8);
    g.addEdge(1, 4, 5);
    g.addEdge(2, 4, 7);

    g.kruskalMST();

    return 0;
}
