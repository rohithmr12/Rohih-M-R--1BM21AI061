#include <iostream>
#include <string>
#include <vector>

std::vector<int> preprocessShiftTable(const std::string& pattern) {
    std::vector<int> shiftTable(256, pattern.size());
    int m = pattern.size();
    
    for (int i = 0; i < m - 1; ++i) {
        shiftTable[static_cast<int>(pattern[i])] = m - 1 - i;
    }
    
    return shiftTable;
}

int horspoolSearch(const std::string& text, const std::string& pattern) {
    int n = text.size();
    int m = pattern.size();
    std::vector<int> shiftTable = preprocessShiftTable(pattern);
    
    int i = m - 1;
    while (i < n) {
        int k = 0;
        while (k < m && pattern[m - 1 - k] == text[i - k]) {
            ++k;
        }
        
        if (k == m) {
            return i - m + 1; // Pattern found at index i - m + 1
        } else {
            i += shiftTable[static_cast<int>(text[i])];
        }
    }
    
    return -1; // Pattern not found
}

int main() {
    std::string text = "This is a simple example of Horspool algorithm implementation.";
    std::string pattern = "example";
    
    int index = horspoolSearch(text, pattern);
    
    if (index != -1) {
        std::cout << "Pattern found at index: " << index << std::endl;
    } else {
        std::cout << "Pattern not found." << std::endl;
    }
    
    return 0;
}






